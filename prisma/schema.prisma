generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator markdown {
  provider = "prisma-markdown"
  title    = "uncar"
  output   = "../docs/ERD.md"
}

//------------------------------------------------
// User
//------------------------------------------------
model User {
  //------------------------------------------------
  // columns
  //------------------------------------------------
  id           String            @id @db.Uuid
  account      String            @unique
  password     String
  nickname     String            @unique
  phone        String            @unique
  countryCode   String            @map("country_code")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  deletedAt    DateTime?         @map("deleted_at")
  //---------------
  /// relation
  //---------------
  /// Profile
  snapshots    UserSnapshot[] /// 사용자 정보 스냅샷
  lastSnapshot UserLastSnapshot? /// 최신 스냅샷
  UserProfileImages UserProfileImage[]

  /// Terms
  TermsAgreements TermsAgreements[]
  /// OAuth
  oAuths          OAuth[] 
  /// Certification
  certifications  Certification[] /// 인증
  // Car
  cars             Car[] /// 소유한 차량
  drivings          Driving[] /// 운전자
  // Reputation
  reputations      UserReputation[] /// 평판
  writerReputations UserReputation[]  @relation("writerReputations") /// 평판 작성
  // Notification
  notifications    Notification[] /// 알림

  relations Rental[]
  @@map("user")
}

model UserSnapshot {
  //------------------------------------------------
  // columns
  //------------------------------------------------
  id           String            @id @db.Uuid
  userId       String            @db.Uuid
  account      String
  password     String
  nickname     String
  phone        String
  countryCode   String            @map("contry_code")
  createdAt    DateTime          @default(now()) @map("created_at")
  //------------------------------------------------
  // relation
  //------------------------------------------------
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastSnapshot UserLastSnapshot?

  @@map("user_snapshot")
}

model UserLastSnapshot {
  //---------------
  // column
  //---------------
  userId     String       @id @map("user_id") @db.Uuid /// 사용자 ID
  snapshotId String       @map("snapshot_id") @db.Uuid /// 스냅샷 ID
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  //---------------
  /// relation
  //---------------
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  snapshot   UserSnapshot @relation(fields: [snapshotId], references: [id], onDelete: Cascade)

  @@unique([snapshotId])
  @@map("user_last_snapshot")
}

model UserProfileImage {
  //---------------
  // column
  //---------------
  userId  String @id @map("user_id") @db.Uuid /// 사용자 ID
  imageId String @map("image_id") @db.Uuid /// 이미지 ID

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  //---------------
  /// relation
  //---------------
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([imageId])
  @@map("user_profile_image")
}

//------------------------------------------------
// TERMS
//------------------------------------------------
model TermsAgreements {
  //---------------
  // column
  //---------------
  id        String     @id @db.Uuid /// 약관동의 ID
  userId    String     @map("user_id") @db.Uuid /// 사용자 ID
  type      TERMS_TYPE // 서비스, 개인정보 수집, 만 14세이상, 마케팅수신동의
  agree     Boolean // 동의 여부 
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  //---------------
  /// relation
  //---------------
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("terms_agreements")
}

enum TERMS_TYPE {
  SERVICE // 서비스 약관동의
  PRIVACY // 개인 정보 수집동의
  AGE_LIMIT // 만 14세 이상 동의
  MARKETING // 마케팅 수신동의
}

//------------------------------------------------
// OAUTH
//------------------------------------------------
model OAuth {
  //------------------------------------------------
  // columns
  //------------------------------------------------
  id        String   @id @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  provider  OAUT_PROVIDER   @map("provider")
  providerId String  @map("provider_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  //---------------
  /// relation
  //---------------
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@unique([userId, provider])
  @@map("oauth")
}

enum OAUT_PROVIDER {
  GOOGLE
  KAKAO
  NAVER
}


//------------------------------------------------
// CERTIFICATION
//------------------------------------------------
model Certification {
  id                 String             @id @db.Uuid
  certificationCodeId String            @map("certification_code_id") @db.Uuid @unique
  userId             String             @map("user_id") @db.Uuid
  targetType         CERTIFICATION_TARGET_TYPE
  type               CERTIFICATION_TYPE
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificationCode  CertificationCode  @relation(fields: [certificationCodeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, type])
  @@map("certification")
}

model CertificationCode {
  id              String               @id @db.Uuid
  targetType      CERTIFICATION_TARGET_TYPE
  type            CERTIFICATION_TYPE
  status          CERTIFICATION_STATUS
  code            String
  target          String
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  expiredAt       DateTime             @map("expired_at")
  certifications  Certification?       // 이 관계는 요구사항에 따라 조정될 수 있음

  @@map("certification_code")
  @@index([target])
  @@index([target, status])
  @@index([createdAt])
  @@index([target, createdAt])
  @@index([expiredAt])
}

enum CERTIFICATION_TARGET_TYPE {
  PHONE
  // EMAIL  // 확장성 고려
  // IDENTITY // 확장성 고려
	@@map("CERTIFICATION_TARGET_TYPE")
}

enum CERTIFICATION_TYPE {
  SIGN_UP
  FIND_PASSWORD
}


enum CERTIFICATION_STATUS {
  PENDING // 대기
  VERIFIED // 인증
  SUCCESS // 성공  
  EXPIRED // 만료
}

//------------------------------------------------
// CAR
//------------------------------------------------
model Car {
  //------------------------------------------------
  // columns
  //------------------------------------------------
  id        String   @id  @db.Uuid
  ownerId   String   @map("owner_id") @db.Uuid
  type      String   @map("type")
  number    String   
  status    CAR_STATUS @map("status") 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  //---------------
  /// relation
  //---------------
  owner  User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images CarImage[] /// 차량 이미지
  snapshots CarSnapshot[] /// 차량 정보 스냅샷

  drivings Driving[] /// 운전자
  parkings Parking[] /// 주차 정보

  relations Rental[]
  @@map("car")
  @@index([number, status])
}

model CarImage {
  //------------------------------------------------
  // columns
  //------------------------------------------------
  id        String   @id @db.Uuid
  carId     String   @map("car_id") @db.Uuid
  imageId   String   @map("image_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  //---------------
  /// relation
  //---------------
  car   Car   @relation(fields: [carId], references: [id], onDelete: Cascade)
  image Image @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@map("car_image")
}

model CarSnapshot{
  //------------------------------------------------
  // columns
  //------------------------------------------------
  id        String   @id @db.Uuid
  carId     String   @map("car_id") @db.Uuid
  ownerId   String   @map("owner_id") @db.Uuid
  type      String   @map("type")
  number    String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  status    CAR_STATUS @map("status")
  //---------------
  /// relation
  //---------------
  car   Car   @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@map("car_snapshot")
}

enum CAR_STATUS {
  ACTIVE // 활성
  SCRAPPED // 폐차
}

model Rental {
  id String @id @db.Uuid
  carId String @map("car_id") @db.Uuid
  userId String @map("user_id") @db.Uuid
  startDate DateTime @map("start_date")
  endDate DateTime @map("end_date")
  status RENTAL_STATUS @map("status")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  car Car @relation(fields: [carId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  drivings Driving[]
}

enum RENTAL_STATUS {
  REQUEST // 요청
  ACCEPT // 수락
  REJECT // 거절
  COMPLETE // 완료
}
model Driving {
  //------------------------------------------------
  // columns
  //------------------------------------------------
  id        String   @id @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  carId     String   @map("car_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  rentalId  String?  @map("rental_id") @db.Uuid 
  //---------------
  /// relation
  //---------------
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  car  Car  @relation(fields: [carId], references: [id], onDelete: Cascade)
  parking Parking[]
  rental Rental? @relation(fields: [rentalId], references: [id], onDelete: SetNull)
	@@map("driving")
  @@index([userId])
  @@index([carId, userId])
}

model Parking {
  //------------------------------------------------
  // columns
  //------------------------------------------------
  id        String   @id @db.Uuid
  carId     String   @map("car_id") @db.Uuid
  drivingId  String   @map("drivingId") @db.Uuid
  location  String   @map("location") /// 주차 위치 (주소)
  latitude  Float    @map("latitude")
  longitude Float    @map("longitude")
  status    PARKING_STATUS @map("status") 

  startDate DateTime @map("start_date") 
  endDate   DateTime @map("end_date")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  //---------------
  /// relation
  //---------------
  car    Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
  driving Driving @relation(fields: [drivingId], references: [id], onDelete: Cascade)
  snapshots ParkingSnapshot[]

  @@unique([carId, drivingId])
  @@map("parking")
}

model ParkingSnapshot {
  //------------------------------------------------
  // columns
  //------------------------------------------------
  id        String   @id @db.Uuid
  carId     String   @map("car_id") @db.Uuid
  drivingId  String   @map("drivingId") @db.Uuid
  location  String   @map("location")
  latitude  Float    @map("latitude")
  longitude Float    @map("longitude")
  status    PARKING_STATUS @map("status")
  startDate DateTime @map("start_date") 
  endDate   DateTime @map("end_date")


  createdAt DateTime @default(now()) @map("created_at")

  //---------------
  /// relation
  //---------------
  parking Parking @relation(fields: [carId, drivingId], references: [carId, drivingId], onDelete: Cascade)
  
  @@map("parking_snapshot")
}

enum PARKING_STATUS {
  PARKING // 주차중
  COMPLETE // 완료
}
//------------------------------------------------
// NOTIFICATION
//------------------------------------------------
model Notification {
  //------------------------------------------------
  // columns
  //------------------------------------------------
  id        String   @id @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  type      NOTIFICATION_TYPE @map("type")
  title     String
  content   String
  readAt    DateTime? @map("read_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  //---------------
  /// relation
  //---------------
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}

enum NOTIFICATION_TYPE {
  SYSTEM // 시스템
  PARKING // 주차
  REPUTATION // 평판
  MESSAGE // 메시지
  EVENT // 이벤트
}

//------------------------------------------------
// USER REPUTATION
//------------------------------------------------
model UserReputation {
  //------------------------------------------------
  // columns
  //------------------------------------------------
  id        String   @id @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  writerId  String   @map("writer_id") @db.Uuid
  score     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  //---------------
  /// relation
  //---------------
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  writer User @relation(fields: [writerId], references: [id], onDelete: Cascade, name: "writerReputations")
  reasons UserReputationReason[]

  @@map("user_reputation")
}

model UserReputationReason {
  //------------------------------------------------
  // columns
  //------------------------------------------------
  id        String   @id @db.Uuid
  userReputationId String @map("user_reputation_id") @db.Uuid
  type      REPUTATION_TYPE @map("type")
  score     Int
  createdAt DateTime @default(now()) @map("created_at")

  //---------------
  /// relation
  //---------------
  userReputation UserReputation @relation(fields: [userReputationId], references: [id], onDelete: Cascade) 

  @@map("user_reputation_reason")
}

enum REPUTATION_TYPE {
  FAST_RESPONSE // 빠른 응답
  KINDNESS // 친절
  PUNCTUALITY // 시간엄수
}

//------------------------------------------------
// IMAGE
//------------------------------------------------
model Image {
  //---------------
  // column
  //---------------
  id        String     @id @db.Uuid
  userId    String     @map("user_id") @db.Uuid
  type      IMAGE_TYPE
  url       String
  createdAt DateTime   @default(now()) @map("created_at")
  deletedAt DateTime?  @map("deleted_at")

  //---------------
  /// relation
  //---------------
  carImages        CarImage[]
  UserProfileImage UserProfileImage[]

  @@map("image")
}

enum IMAGE_TYPE {
  PROFILE // 프로필 이미지
  CAR // 차량 이미지
}
